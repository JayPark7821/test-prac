package com.example.demo.mock;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import com.example.demo.post.domain.Post;
import com.example.demo.post.service.port.PostRepository;
import com.example.demo.user.domain.User;

public class FakePostRepository implements PostRepository {


	private final AtomicLong autoGeneratedId = new AtomicLong(0);
	private final List<Post> data = Collections.synchronizedList(new ArrayList<>());

	@Override
	public Optional<Post> findById(final long id) {
		return data.stream().filter(item -> item.getId().equals(id)).findAny();
	}

	@Override
	public Post save(final Post post) {
		if (post.getId() == null || post.getId() == 0 ) {
			Post savedPost = Post.builder()
				.id(autoGeneratedId.incrementAndGet())
				.content(post.getContent())
				.createdAt(post.getCreatedAt())
				.modifiedAt(post.getModifiedAt())
				.writer(post.getWriter())
				.build();
			data.add(savedPost);
			return savedPost;
		} else {
			data.removeIf(item -> Objects.equals(item.getId(), post.getId()));
			data.add(post);
			return post;
		}
	}
}
